3:I[4707,[],""]
5:I[6423,[],""]
4:["slug","scalable-apis-nestjs-postgresql","d"]
0:["hiKZE3QUcLSkX0mVrT72j",[[["",{"children":["blog",{"children":[["slug","scalable-apis-nestjs-postgresql","d"],{"children":["__PAGE__?{\"slug\":\"scalable-apis-nestjs-postgresql\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","scalable-apis-nestjs-postgresql","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2df01e904acb34b1.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_f367f3","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]],null],null],["$L6",null]]]]
7:I[2972,["972","static/chunks/972-380f0c685af81116.js","308","static/chunks/app/blog/%5Bslug%5D/page-040a7ccde90ed2e7.js"],""]
8:T1e8d,<h1>Building Scalable APIs with NestJS and PostgreSQL</h1>
<p>When building enterprise-grade applications, choosing the right tech stack is crucial. In this post, I'll walk you through creating a scalable API using NestJS and PostgreSQL - a combination I've used successfully in production environments.</p>
<h2>Why NestJS and PostgreSQL?</h2>
<p><strong>NestJS</strong> provides a solid architectural foundation with:</p>
<ul>
<li>Built-in TypeScript support</li>
<li>Dependency injection system</li>
<li>Modular architecture</li>
<li>Extensive ecosystem of modules</li>
</ul>
<p><strong>PostgreSQL</strong> offers:</p>
<ul>
<li>ACID compliance</li>
<li>Advanced data types (JSON, arrays, etc.)</li>
<li>Excellent performance with proper indexing</li>
<li>Strong consistency guarantees</li>
</ul>
<h2>Project Setup</h2>
<p>Let's start by setting up a new NestJS project:</p>
<pre><code>npm i -g @nestjs/cli
nest new my-api
cd my-api
npm install @nestjs/typeorm typeorm pg
npm install -D @types/pg
</code></pre>
<h2>Database Configuration</h2>
<p>Create a <code>database.config.ts</code> file:</p>
<pre><code>import { TypeOrmModuleOptions } from '@nestjs/typeorm';

export const databaseConfig: TypeOrmModuleOptions = {
  type: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 5432,
  username: process.env.DB_USERNAME || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
  database: process.env.DB_NAME || 'myapi',
  entities: [__dirname + '/**/*.entity{.ts,.js}'],
  synchronize: process.env.NODE_ENV !== 'production',
  logging: process.env.NODE_ENV === 'development',
};
</code></pre>
<h2>Creating Your First Entity</h2>
<p>Here's a User entity with proper relationships:</p>
<pre><code>import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToMany } from 'typeorm';
import { Post } from './post.entity';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ unique: true })
  email: string;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ select: false })
  password: string;

  @OneToMany(() => Post, post => post.author)
  posts: Post[];

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}
</code></pre>
<h2>Implementing Services</h2>
<p>A clean service layer separates business logic from controllers:</p>
<pre><code>import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from './user.entity';
import { CreateUserDto, UpdateUserDto } from './dto';

@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository&#x3C;User>,
  ) {}

  async findAll(page = 1, limit = 10): Promise&#x3C;{ data: User[]; total: number }> {
    const [data, total] = await this.userRepository.findAndCount({
      skip: (page - 1) * limit,
      take: limit,
      order: { createdAt: 'DESC' },
    });

    return { data, total };
  }

  async findById(id: string): Promise&#x3C;User> {
    const user = await this.userRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }
    return user;
  }

  async create(createUserDto: CreateUserDto): Promise&#x3C;User> {
    const user = this.userRepository.create(createUserDto);
    return this.userRepository.save(user);
  }
}
</code></pre>
<h2>Performance Optimization</h2>
<h3>Database Indexing</h3>
<p>Create proper indexes for frequently queried fields:</p>
<pre><code>-- Add indexes for better query performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_posts_author_id ON posts(author_id);
CREATE INDEX idx_posts_created_at ON posts(created_at);
</code></pre>
<h3>Query Optimization</h3>
<p>Use TypeORM's query builder for complex queries:</p>
<pre><code>async findUserPostsWithStats(userId: string) {
  return this.userRepository
    .createQueryBuilder('user')
    .leftJoinAndSelect('user.posts', 'post')
    .loadRelationCountAndMap('user.postCount', 'user.posts')
    .where('user.id = :userId', { userId })
    .getOne();
}
</code></pre>
<h2>Authentication &#x26; Authorization</h2>
<p>Implement JWT authentication:</p>
<pre><code>@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService) {}

  async canActivate(context: ExecutionContext): Promise&#x3C;boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);
    
    if (!token) {
      throw new UnauthorizedException();
    }

    try {
      const payload = await this.jwtService.verifyAsync(token);
      request['user'] = payload;
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }
}
</code></pre>
<h2>Error Handling</h2>
<p>Implement global exception handling:</p>
<pre><code>@Catch()
export class AllExceptionsFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse();
    const request = ctx.getRequest();

    const status = exception instanceof HttpException 
      ? exception.getStatus() 
      : HttpStatus.INTERNAL_SERVER_ERROR;

    const message = exception instanceof HttpException
      ? exception.getResponse()
      : 'Internal server error';

    response.status(status).json({
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      message,
    });
  }
}
</code></pre>
<h2>Testing Strategy</h2>
<p>Write comprehensive tests for your services:</p>
<pre><code>describe('UserService', () => {
  let service: UserService;
  let repository: Repository&#x3C;User>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UserService,
        {
          provide: getRepositoryToken(User),
          useValue: {
            findAndCount: jest.fn(),
            findOne: jest.fn(),
            create: jest.fn(),
            save: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get&#x3C;UserService>(UserService);
    repository = module.get&#x3C;Repository&#x3C;User>>(getRepositoryToken(User));
  });

  it('should find all users with pagination', async () => {
    const mockUsers = [/* mock data */];
    jest.spyOn(repository, 'findAndCount').mockResolvedValue([mockUsers, 10]);

    const result = await service.findAll(1, 10);
    expect(result.data).toEqual(mockUsers);
    expect(result.total).toBe(10);
  });
});
</code></pre>
<h2>Deployment Considerations</h2>
<h3>Docker Configuration</h3>
<pre><code>FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000
CMD ["node", "dist/main"]
</code></pre>
<h3>Environment Variables</h3>
<pre><code>NODE_ENV=production
DB_HOST=your-postgres-host
DB_PORT=5432
DB_USERNAME=your-username
DB_PASSWORD=your-password
DB_NAME=your-database
JWT_SECRET=your-jwt-secret
</code></pre>
<h2>Conclusion</h2>
<p>This architecture provides a solid foundation for scalable APIs. Key takeaways:</p>
<ul>
<li>Use TypeORM for type-safe database operations</li>
<li>Implement proper error handling and validation</li>
<li>Add comprehensive testing from the start</li>
<li>Optimize database queries and add appropriate indexes</li>
<li>Use environment variables for configuration</li>
</ul>
<p>The combination of NestJS and PostgreSQL has served me well in production environments, handling thousands of requests per minute with proper optimization.</p>
<p>What's your experience with NestJS? Let me know in the comments below!</p>
2:["$","div",null,{"className":"pt-20","children":["$","div",null,{"className":"container-max-width section-padding py-16","children":["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","$L7",null,{"href":"/blog","className":"inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 mb-8","children":[["$","svg",null,{"className":"w-5 h-5 mr-2","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M15 19l-7-7 7-7"}]}],"Back to Blog"]}],["$","header",null,{"className":"mb-12","children":[["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","0",{"className":"px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full","children":"NestJS"}],["$","span","1",{"className":"px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full","children":"PostgreSQL"}],["$","span","2",{"className":"px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full","children":"API Design"}],["$","span","3",{"className":"px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full","children":"TypeScript"}]]}],["$","h1",null,{"className":"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6","children":"Building Scalable APIs with NestJS and PostgreSQL"}],["$","div",null,{"className":"flex items-center text-gray-600 dark:text-gray-400 mb-6","children":[["$","time",null,{"dateTime":"2024-08-15","className":"mr-4","children":"August 15, 2024"}],["$","span",null,{"children":"·"}],["$","span",null,{"className":"ml-4","children":"8 min read"}]]}],["$","p",null,{"className":"text-xl text-gray-600 dark:text-gray-300 leading-relaxed","children":"Learn how to create enterprise-grade APIs using NestJS framework with PostgreSQL database, including authentication, validation, and performance optimization."}]]}],["$","article",null,{"className":"prose prose-lg dark:prose-invert max-w-none prose-headings:text-gray-900 dark:prose-headings:text-white prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-code:text-pink-600 dark:prose-code:text-pink-400","dangerouslySetInnerHTML":{"__html":"$8"}}],["$","div",null,{"className":"mt-16 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"flex-shrink-0","children":["$","div",null,{"className":"w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold","children":"YN"}]}],["$","div",null,{"className":"ml-4","children":[["$","h4",null,{"className":"text-lg font-semibold text-gray-900 dark:text-white","children":"Your Name"}],["$","p",null,{"className":"text-gray-600 dark:text-gray-300","children":"Full-stack developer with 7+ years of experience in JavaScript, TypeScript, and modern web technologies."}]]}]]}]}],["$","div",null,{"className":"mt-12 pt-8 border-t border-gray-200 dark:border-gray-700","children":["$","$L7",null,{"href":"/blog","className":"inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors","children":"View All Posts"}]}]]}]}]}]
6:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Building Scalable APIs with NestJS and PostgreSQL - Your Name"}],["$","meta","3",{"name":"description","content":"Learn how to create enterprise-grade APIs using NestJS framework with PostgreSQL database, including authentication, validation, and performance optimization."}],["$","meta","4",{"property":"og:title","content":"Building Scalable APIs with NestJS and PostgreSQL"}],["$","meta","5",{"property":"og:description","content":"Learn how to create enterprise-grade APIs using NestJS framework with PostgreSQL database, including authentication, validation, and performance optimization."}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"property":"article:published_time","content":"2024-08-15"}],["$","meta","8",{"name":"twitter:card","content":"summary"}],["$","meta","9",{"name":"twitter:title","content":"Building Scalable APIs with NestJS and PostgreSQL"}],["$","meta","10",{"name":"twitter:description","content":"Learn how to create enterprise-grade APIs using NestJS framework with PostgreSQL database, including authentication, validation, and performance optimization."}],["$","meta","11",{"name":"next-size-adjust"}]]
1:null
